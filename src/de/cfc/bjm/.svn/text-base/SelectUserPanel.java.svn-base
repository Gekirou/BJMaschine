package de.cfc.bjm;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.app.AlertDialog;
import android.app.ExpandableListActivity;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.util.Log;
import android.view.ContextMenu;
import android.view.MenuItem;
import android.view.View;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.View.OnCreateContextMenuListener;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.ExpandableListContextMenuInfo;
import android.widget.ExpandableListView.OnChildClickListener;
import de.cfc.bjm.data.DataHolder;
import de.cfc.bjm.data.UserSelectAdapter;

public class SelectUserPanel extends ExpandableListActivity{

	int position=0;
	static int userid;
	static int verbid;
	static ExpandableListView lv;
	Bundle instance;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		instance = savedInstanceState;
		getUser();
		Bundle bdl = getIntent().getExtras();
		position = bdl.getInt("position");
		
		lv = getExpandableListView();
		lv.setOnChildClickListener(childListener);
		lv.setOnCreateContextMenuListener(contextmenu);
		
	}
	
	public void getUser(){
		DataHolder.db.open();
		Cursor verbindung = DataHolder.db.getVerbindungen();
		startManagingCursor(verbindung);
		ArrayList<Map<String, String>> verbindungsListe = new ArrayList<Map<String, String>>();
		HashMap<String, String> curGroupMap;
		verbindung.moveToFirst();
		
		while(!verbindung.isAfterLast()){
			curGroupMap = (HashMap<String, String>) new HashMap<String, String>();
			curGroupMap.put("name", verbindung.getString(1));
			verbindungsListe.add(curGroupMap);
			Log.d("verbindung while 1", "Name: "+verbindung.getString(1));
			verbindung.moveToNext();
		}
		
		verbindung.moveToFirst();
        List<List<Map<String, String>>> childData = new ArrayList<List<Map<String, String>>>();
        List<Map<String, String>> children;
        Map<String, String> curChildMap;
        
		while(!verbindung.isAfterLast()){
			children = new ArrayList<Map<String,String>>();
			Log.d("verbindung while 2", "Name: "+verbindung.getString(1));
			Cursor userCursor = DataHolder.db.getAllUsersFromVerbindung(verbindung.getInt(0)-1);
			userCursor.moveToFirst();
			while(!userCursor.isAfterLast()){
				Log.d("user while 1", "Name: "+userCursor.getString(1));
				curChildMap = new HashMap<String, String>();
				curChildMap.put("name", userCursor.getString(1));
				children.add(curChildMap);
				userCursor.moveToNext();
			}
			childData.add(children);
			verbindung.moveToNext();
		}
		

				UserSelectAdapter mAdapter = new UserSelectAdapter(this, verbindungsListe, R.layout.us_groupview, new String[] {"name"}, new int[] {R.id.usg_name}, 
						childData, R.layout.us_childview, new String[]{"name"}, new int[]{R.id.usc_name});
		setListAdapter(mAdapter);
		}
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		onCreate(instance);
	};

	OnChildClickListener childListener = new OnChildClickListener() {
		
		public boolean onChildClick(ExpandableListView parent, View v,
				int groupPosition, int childPosition, long id) {
			if(position==0){
			DataHolder.usr1ID = (int) id;
		}else{
			DataHolder.usr2ID = (int) id;
		}
			Log.d("childListener", "Setting ID to :"+id);
			finish();
			
			return true;
			
		}
	};
	public static OnCreateContextMenuListener contextmenu= new OnCreateContextMenuListener(){

		public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
			ExpandableListView.ExpandableListContextMenuInfo info = (ExpandableListContextMenuInfo) menuInfo;
			
			int type = ExpandableListView.getPackedPositionType(info.packedPosition);
			int group = ExpandableListView.getPackedPositionGroup(info.packedPosition);
			int child = ExpandableListView.getPackedPositionChild(info.packedPosition);
			
			if(type == 1){
				Cursor cur = DataHolder.db.getAllUsersFromVerbindung(group);
				cur.move(child+1);
				menu.setHeaderTitle(cur.getString(1));
				menu.add(0, R.id.uc_usrdetail, 0, "Nutzerdetails");
				menu.add(0, R.id.uc_usredit,0, "Bearbeiten");
				menu.add(0, R.id.uc_usrdelete, 0, "Löschen");
				userid = cur.getInt(0);
			}else{
				if(type == 0){
					Cursor cur = DataHolder.db.getVerbindungen();
					cur.move(group);
					menu.setHeaderTitle(cur.getString(1));
					menu.add(0, R.id.uc_verbdelete, 0, "Löschen");
					verbid = cur.getInt(0);
				}
			}
		}
	};
	
	 public boolean onContextItemSelected(MenuItem item) {
		 
		   switch (item.getItemId()) {
		   case R.id.uc_usredit:
			   	Intent i = new Intent(this,EditUserPanel.class);
			   	i.putExtra("id", userid);
			   	startActivityForResult(i,0);
			   break;
		   case R.id.uc_usrdelete:
			   showAlertDialogUserSure();
			   break;
		   case R.id.uc_usrdetail:
			   final Intent in = new Intent(this, UserDetail.class);
			   in.putExtra("id", userid);
			   startActivityForResult(in, 0);
			   break;
		   case R.id.uc_verbdelete:
			   showAlertDialogVerbindungSure();
			   break;
		   default:
			   return super.onContextItemSelected(item);
		   }
	   
	   return super.onContextItemSelected(item);
	 }
	 
		public void showAlertDialogUserSure(){
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			builder.setMessage("Bist du dir sicher, dass du diesen Nutzer löschen möchtest?")
			       .setCancelable(false)
			       .setPositiveButton("Ja", new DialogInterface.OnClickListener() {
			           public void onClick(DialogInterface dialog, int id) {
						  DataHolder.db.deleteUser(userid);	
						  onCreate(instance);}
			       });
			builder.setNegativeButton("Abbrechen", new DialogInterface.OnClickListener() {
			           public void onClick(DialogInterface dialog, int id) {
						  dialog.cancel();	           }
			       });
			AlertDialog alert = builder.create();
			alert.show();
			}
		
		public void showAlertDialogVerbindungSure(){
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			builder.setMessage("Bist du dir sicher, dass du diese Verbindung löschen möchtest? Sämtliche Nutzer darin gehen damit verloren!")
			       .setCancelable(false)
			       .setPositiveButton("Ja", new DialogInterface.OnClickListener() {
			           public void onClick(DialogInterface dialog, int id) {
						   DataHolder.db.deleteVerbindung(verbid);
						   onCreate(instance);}
			       });
			builder.setNegativeButton("Abbrechen", new DialogInterface.OnClickListener() {
		           public void onClick(DialogInterface dialog, int id) {
					  dialog.cancel();	           }
		       });
			AlertDialog alert = builder.create();
			alert.show();
			}
	
}
