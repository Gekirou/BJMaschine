package de.cfc.bjm;


import java.io.File;
import java.text.NumberFormat;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import de.cfc.bjm.data.DataHolder;

public class Saufschirm extends Activity {
	private Handler uihandler;
	private TextView dauer1;
	private TextView dauer2;
	private int dauerms1=0;
	private int dauerms2=0;
	public boolean isActive1=true;
	public boolean isActive2=true;
	private long startTime;
	private TextView stopBtn1;
	private TextView stopBtn2;
	LinearLayout usr1LinLay;
	LinearLayout usr2LinLay;
	LinearLayout winnerLinLay;
	TextView saufnutzer1;
	TextView saufnutzer2;
	boolean alternate;
	boolean showActive = true;
	ImageView ava1;
	ImageView ava2;
	MediaPlayer media;
	MediaPlayer saufMedia;
	ProgressDialog progDialog;
	Context myContext;
	boolean postSauf=false;
	
	    /** Called when the activity is first created. */
	    @Override
	    public void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        requestWindowFeature(Window.FEATURE_NO_TITLE);
	        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
	        setContentView(R.layout.saufschirm);
	        myContext = this;
	        
	        saufnutzer1 = (TextView) findViewById(R.id.saufschirmusr1);
	        saufnutzer2 = (TextView) findViewById(R.id.saufschirmusr2);
	        ava1 = (ImageView) findViewById(R.id.user1avatar);
	        ava2 = (ImageView) findViewById(R.id.user2avatar);
	 		usr1LinLay = (LinearLayout) findViewById(R.id.user1linlay);
	 		usr2LinLay = (LinearLayout) findViewById(R.id.user2linlay);
	        
	        String nutzername1, nutzername2;
	        DataHolder.db.open();
	        Cursor cur = DataHolder.db.getUser(DataHolder.usr1ID);
	        startManagingCursor(cur);
	        nutzername1 = cur.getString(1);
	        File check = new File("/sdcard/.bjm/avatar/"+cur.getString(2)); 
	    	if(check.exists()){
	        	Bitmap pic = BitmapFactory.decodeFile("/sdcard/.bjm/avatar/"+cur.getString(2));
	        	ava1.setImageBitmap(pic);
	        	
	        } else {
	        	Bitmap pic = BitmapFactory.decodeFile("/sdcard/.bjm/avatar/bier.jpg");
	        	ava1.setImageBitmap(pic);
	        }
	        
        	
	        cur = DataHolder.db.getUser(DataHolder.usr2ID);
	        nutzername2 = cur.getString(1);
	        
	        File check2 = new File("/sdcard/.bjm/avatar/"+cur.getString(2)); 
	    	if(check2.exists()){
	        	Bitmap pic = BitmapFactory.decodeFile("/sdcard/.bjm/avatar/"+cur.getString(2));
	        	ava2.setImageBitmap(pic);
	        	
	        } else {
	        	Bitmap pic = BitmapFactory.decodeFile("/sdcard/.bjm/avatar/bier.jpg");
	        	ava2.setImageBitmap(pic);
	        }
	        
	        DataHolder.db.close();
	        
	        saufnutzer1.setText(nutzername1);
	        saufnutzer2.setText(nutzername2);
	        
	        dauer1 = (TextView) findViewById(R.id.DauerUsr1);
	        dauer2 = (TextView) findViewById(R.id.DauerUsr2);
	        
	        stopBtn1 = (TextView) findViewById(R.id.StopUsr1);
	        stopBtn2 = (TextView) findViewById(R.id.StopUsr2);
	        
	        LinearLayout toplevelLinLay=(LinearLayout)findViewById(R.id.toplevel);
	        
	        toplevelLinLay.setOnClickListener(new OnClickListener() {
				
				public void onClick(View v) {
					stopBtn1.setVisibility(View.GONE);
					isActive1=false;	
				}
			});
	        
	        /**usr2LinLay.setOnClickListener(new OnClickListener() {
	        	
				public void onClick(View v) {
					stopBtn2.setVisibility(View.GONE);
					isActive2=false;
				}
			});*/
	        uihandler = new Handler(); 

	        
	        progDialog = new ProgressDialog(this);
	        progDialog.setIndeterminate(true);
	        progDialog.setMessage("Gut hinhorchen!");
	        progDialog.setCancelable(false);
	        progDialog.show();
	        
	        
	        media = MediaPlayer.create(myContext, R.raw.hochbittefertig);
	        media.setOnCompletionListener(new OnCompletionListener() {
				
				public void onCompletion(MediaPlayer mp) {
					postHochBitte();	
				}
			});
	        
	        media.start();
	    }
	    
	    public void postHochBitte(){
	    	int zeitabstand = (int) ((int) 1000*Math.random()+1000);
	    	long time = System.currentTimeMillis();
	    	while(System.currentTimeMillis()<time+zeitabstand){
	    		
	    	}
	        saufMedia = MediaPlayer.create(myContext, R.raw.saufs);
	        saufMedia.setOnCompletionListener(new OnCompletionListener() {
				
				public void onCompletion(MediaPlayer mp) {
					postSaufSound();
				}
	        });
	        
	        saufMedia.start();
	    	
	    }

	    
	    public void postSaufSound(){
			progDialog.dismiss();
	        startTime = System.currentTimeMillis();
	        uihandler.removeCallbacks(updateui);
	        uihandler.postDelayed(updateui, 100);
	    }

	    
	    @Override
	    public void onBackPressed() {
	    	if(!postSauf){
	    		stopBtn2.setVisibility(View.GONE);
				isActive2=false;
			}else{
				super.onBackPressed();
				showActive=false;
	    		setResult(RESULT_OK);
			}
	    	
	    }
	    
	    @Override
	    protected void onDestroy() {
	    	super.onDestroy();
	    	showActive=false;
	    }

	    private Runnable updateui = new Runnable() {
	 	   public void run() {
	 		   String seconds, mseconds;
	 		   long currentTime = System.currentTimeMillis();
	 		   int sec = (int) ((currentTime - startTime)/1000);
	 		   int msec = (int) ((currentTime - startTime)-(sec*1000));
	 		   if(msec<10){
	 		   mseconds ="00"+msec;
	 		   }else{ if(msec<100){
	 			   mseconds="0"+msec;
	 			   } else{
	 				   mseconds = ""+msec;}
	 			   }
	 		   seconds = ""+sec;
	 		   
	 		   if(isActive1){
	 		   dauer1.setText(seconds+"."+mseconds);
	 		   dauerms1 = (int) (currentTime - startTime);
	 		   }
	 		   if(isActive2){
	 		   dauer2.setText(seconds+"."+mseconds);
	 		   dauerms2=(int) (currentTime-startTime);
	 		   }
	 		   
	 		   if(!isActive1&&!isActive2){
	 		        uihandler.removeCallbacks(updateui);
	 		        showAlertDialogSaveData();
	 		        
	 		   }else{
		 		   uihandler.postDelayed(this, 5);
	 		   }
	 	   }
	 	};
	 	
	 	public void postSauf(){
	 		postSauf = true;
	 		DataHolder.db.open();
	 		DataHolder.db.insertListEntry(DataHolder.usr1ID, DataHolder.usr2ID, dauerms1, System.currentTimeMillis(), DataHolder.volume, DataHolder.liquid, DataHolder.anzahl);
	 		DataHolder.db.insertListEntry(DataHolder.usr2ID, DataHolder.usr1ID, dauerms2, System.currentTimeMillis(), DataHolder.volume, DataHolder.liquid, DataHolder.anzahl);
	 		
	 		Cursor user1 = DataHolder.db.getLastDrinkFromUser(DataHolder.usr1ID);
 			user1.moveToFirst();
 			startManagingCursor(user1);
 			Cursor user2 = DataHolder.db.getLastDrinkFromUser(DataHolder.usr2ID);
 			user2.moveToFirst();
 			startManagingCursor(user2);
	 		if(dauerms1<dauerms2){
	 			winnerLinLay = usr1LinLay;
	 			calculateAndShowUsr1XP(user1.getInt(0), true);
	 			calculateAndShowUsr2XP(user2.getInt(0), false);
	 		}else{
	 			calculateAndShowUsr1XP(user1.getInt(0), false);
	 			calculateAndShowUsr2XP(user2.getInt(0), true);
	 			winnerLinLay = usr2LinLay;
	 		}
	 		DataHolder.db.close();
	 		
	 		uihandler.removeCallbacks(showWinner);
	        uihandler.postDelayed(showWinner, 500);
	        
//	        Button zurueck = (Button) findViewById(R.id.returnButton);
//
//	        zurueck.setVisibility(Button.VISIBLE);
//	        zurueck.setOnClickListener(new OnClickListener() {
//				
//				public void onClick(View v) {
//					final Intent i = new Intent(v.getContext(), Start.class);
//			 		startActivity(i);
//
//				}
//			});
//	        
	        usr1LinLay.setOnClickListener(new OnClickListener() {
				
				public void onClick(View v) {
					final Intent i = new Intent(v.getContext(), Bestenliste.class);
			 		DataHolder.db.open();
					Cursor listid = DataHolder.db.getLastDrinkFromUser(DataHolder.usr1ID);
					startManagingCursor(listid);
					Cursor listid2nd = DataHolder.db.getLastDrinkFromUser(DataHolder.usr2ID);
					startManagingCursor(listid2nd);
					DataHolder.lid=listid.getInt(0);
					DataHolder.lid2nd=listid2nd.getInt(0);
			 		DataHolder.db.close();
			 		showActive=false;
			 		i.putExtra("mode", "saufmode");
			 		startActivity(i);

				}
			});
	        
	        
	        
	        usr2LinLay.setOnClickListener(new OnClickListener() {
				
				public void onClick(View v) {
					final Intent i = new Intent(v.getContext(), Bestenliste.class);
			 		DataHolder.db.open();
					Cursor listid = DataHolder.db.getLastDrinkFromUser(DataHolder.usr2ID);
					startManagingCursor(listid);
					Cursor listid2nd = DataHolder.db.getLastDrinkFromUser(DataHolder.usr1ID);
					startManagingCursor(listid2nd);
					DataHolder.lid=listid.getInt(0);
					DataHolder.lid2nd=listid2nd.getInt(0);
					listid.close();
					showActive=false;
					i.putExtra("mode", "saufmode");
					startActivity(i);
					
				}
			});
	        
	 	}
	 	
	 	public void calculateAndShowUsr1XP(int id, boolean winner){
	 			
	 		double[] usr1pts = 	XPCalculator.calcXP(DataHolder.usr1ID, id, DataHolder.volume_value, DataHolder.anzahl, dauerms1, winner);
 			LinearLayout rankBLinLay = (LinearLayout) findViewById(R.id.ss_rmLinLay1);
 			LinearLayout persBLinLay = (LinearLayout) findViewById(R.id.ss_pmLinLay1);
 			LinearLayout levelUp = (LinearLayout) findViewById(R.id.ss_levelUp1);
 			LinearLayout totalXPLinLay = (LinearLayout) findViewById(R.id.ss_txpLinLay1);
 			

 			TextView rankBTV = (TextView) findViewById(R.id.ss_rmText1);
 			TextView persBTV = (TextView) findViewById(R.id.ss_pmText1);
 			TextView totalXPTV = (TextView) findViewById(R.id.ss_txpText1);
 			
 			
 			NumberFormat format = NumberFormat.getInstance();
 			format.setMinimumFractionDigits(0);
 			format.setMaximumFractionDigits(2);

 			totalXPTV.setText(format.format(usr1pts[2])); 			
 			totalXPLinLay.setVisibility(View.VISIBLE);

 			if(usr1pts[0]!=0){
	 			rankBLinLay.setVisibility(View.VISIBLE);
	 			rankBTV.setText("Top 20!");
 			}
 			if(usr1pts[1]!=0){
	 			persBLinLay.setVisibility(View.VISIBLE);
	 			persBTV.setText("Pers. Rekord!");
 			}
 			if(usr1pts[3]!=0){
	 			levelUp.setVisibility(View.VISIBLE);
 			}
 			
	 	}
	 	
	 	public void calculateAndShowUsr2XP(int id, boolean winner){
	 		
	 			
	 		double[] usr1pts = XPCalculator.calcXP(DataHolder.usr2ID, id, DataHolder.volume_value, DataHolder.anzahl, dauerms2, winner);
 			LinearLayout rankBLinLay = (LinearLayout) findViewById(R.id.ss_rmLinLay2);
 			LinearLayout persBLinLay = (LinearLayout) findViewById(R.id.ss_pmLinLay2);
 			LinearLayout levelUp = (LinearLayout) findViewById(R.id.ss_levelUp2);
 			LinearLayout totalXPLinLay = (LinearLayout) findViewById(R.id.ss_txpLinLay2);
 			

 			TextView rankBTV = (TextView) findViewById(R.id.ss_rmText2);
 			TextView persBTV = (TextView) findViewById(R.id.ss_pmText2);
 			TextView totalXPTV = (TextView) findViewById(R.id.ss_txpText2);
 			
 			
 			NumberFormat format = NumberFormat.getInstance();
 			format.setMinimumFractionDigits(0);
 			format.setMaximumFractionDigits(2);

 			totalXPTV.setText(format.format(usr1pts[2]));
 			
 			totalXPLinLay.setVisibility(View.VISIBLE);

 			if(usr1pts[0]!=0){
	 			rankBLinLay.setVisibility(View.VISIBLE);
	 			rankBTV.setText("Top 20!");
 			}
 			if(usr1pts[1]!=0){
	 			persBLinLay.setVisibility(View.VISIBLE);
	 			persBTV.setText("Pers. Rekord!");
 			}
 			if(usr1pts[3]!=0){
	 			levelUp.setVisibility(View.VISIBLE);
 			}
 			
	 	}
	 	
	    private Runnable showWinner = new Runnable() {
		 	   public void run() {
		 		   if(alternate){
		 			   winnerLinLay.setBackgroundResource(R.color.white);
		 			   alternate=!alternate;
		 		   }else{
		 			   winnerLinLay.setBackgroundResource(R.color.green);
		 			   alternate=!alternate;
		 		   }
		 		   if(showActive){
			        uihandler.postDelayed(showWinner, 500);
		 		   }else{
		 			   winnerLinLay.setBackgroundResource(R.color.green);
		 			   uihandler.removeCallbacks(showWinner);
		 		   }
		 	   }
		 	};
		 	
		 	public void showAlertDialogSaveData(){
				AlertDialog.Builder builder = new AlertDialog.Builder(this);
				builder.setMessage("Soll der Datensatz gespeichert werden?")
				       .setCancelable(false)
				       .setPositiveButton("Ja", new DialogInterface.OnClickListener() {
				           public void onClick(DialogInterface dialog, int id) {
							  postSauf();}
				       });
				builder.setNegativeButton("Nein", new DialogInterface.OnClickListener() {
				           public void onClick(DialogInterface dialog, int id) {
							  dialog.cancel();
							  finish();}
				       });
				AlertDialog alert = builder.create();
				alert.show();
				}
		 	
}
